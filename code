<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Kevin's Gamified Exam Dashboard</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
  body { font-family: 'Roboto', sans-serif; margin:0; padding:0; background:#f4f4f9; }
  header { background:#1e1e2f; color:#fff; text-align:center; padding:1rem; font-size:1.8rem; position:sticky; top:0; z-index:100; }
  .countdown { text-align:center; margin:1rem 0; font-size:1.2rem; color:#333; font-weight:600; }
  .container { display:flex; flex-direction:column; max-width:900px; margin:auto; padding:1rem; gap:1rem; }
  .day-card { background:#fff; border-radius:10px; box-shadow:0 4px 8px rgba(0,0,0,0.1); padding:1rem; transition:0.3s; }
  .day-card:hover { transform: translateY(-3px); }
  .day-card h2 { cursor:pointer; text-align:center; color:#1e1e2f; margin-bottom:0.5rem; }
  .tasks { display:block; }
  .task { display:flex; justify-content:space-between; align-items:center; margin:0.3rem 0; padding:0.5rem; border-radius:5px; cursor:pointer; color:#000; font-weight:500; transition:0.3s; }
  .task.completed { opacity:0.6; text-decoration:line-through; }
  .task button { border:none; border-radius:5px; padding:0.3rem 0.6rem; background:#1e1e2f; color:#fff; cursor:pointer; transition:0.3s; }
  .task button:hover { background:#333; }
  .progress-bar { width:100%; background:#ddd; border-radius:5px; height:12px; margin-top:0.5rem; }
  .progress { height:100%; border-radius:5px; width:0%; transition: width 0.5s; }
  .cumulative { width:90%; max-width:1000px; margin:1rem auto; text-align:center; }
  .cumulative h3 { color:#1e1e2f; margin-bottom:0.5rem; }
  /* Subject Colors */
  .TPDE { background:#FFADAD; }
  .DEM { background:#FFD6A5; }
  .EDA { background:#FDFFB6; }
  .KDM { background:#CAFFBF; }
  .MT { background:#9BF6FF; }
  .UHV { background:#BDB2FF; }
  .GYM { background:#E0E0E0; }
</style>
</head>
<body>

<header>Kevin's Gamified Exam Dashboard</header>
<div class="countdown" id="countdown">Exam in -- days --:--:--</div>

<div class="cumulative">
  <h3>Cumulative Progress</h3>
  <div class="progress-bar"><div id="cumulativeProgress" class="progress"></div></div>
</div>

<div class="container" id="daysContainer">
  <!-- Day cards will be injected here by JS -->
</div>

<script>
const schedule = [
  // Day 1
  {day:"Oct 1", tasks:[
    {time:"6–9 AM", subject:"TPDE", task:"TPDE U1 Laplace"},
    {time:"9:30–11:30 AM", subject:"MT", task:"MT U1 Casting"},
    {time:"11:30–12:30 PM", subject:"GYM", task:"Gym"},
    {time:"1–3 PM", subject:"MT", task:"MT U2 Forming"},
    {time:"3:30–5 PM", subject:"TPDE", task:"TPDE Practice"},
    {time:"6:30–8 PM", subject:"MT", task:"Finish MT U2 + Diagrams"},
    {time:"8:30–10 PM", subject:"TPDE", task:"Flashcards TPDE + MT"}
  ]},
  // Day 2
  {day:"Oct 2", tasks:[
    {time:"6–9 AM", subject:"TPDE", task:"TPDE U2 Fourier"},
    {time:"9:30–11:30 AM", subject:"DEM", task:"DEM U1 Logic Gates"},
    {time:"11:30–12:30 PM", subject:"GYM", task:"Gym"},
    {time:"1–3 PM", subject:"EDA", task:"EDA U1 Electrical Drives"},
    {time:"3:30–5 PM", subject:"TPDE", task:"TPDE Practice"},
    {time:"6:30–8 PM", subject:"DEM", task:"DEM Practice"},
    {time:"8:30–10 PM", subject:"TPDE", task:"Flashcards TPDE + DEM"}
  ]},
  // Day 3
  {day:"Oct 3", tasks:[
    {time:"6–9 AM", subject:"TPDE", task:"TPDE U3 PDE Methods"},
    {time:"9:30–11:30 AM", subject:"DEM", task:"DEM U2 Combinational Circuits"},
    {time:"11:30–12:30 PM", subject:"GYM", task:"Gym"},
    {time:"1–3 PM", subject:"EDA", task:"EDA U2 Converters"},
    {time:"3:30–5 PM", subject:"KDM", task:"KDM U3 Acceleration & Forces"},
    {time:"5:30–7 PM", subject:"MT", task:"MT U3 Machining"},
    {time:"7:30–9 PM", subject:"TPDE", task:"TPDE Practice"}
  ]},
  // Day 4
  {day:"Oct 4", tasks:[
    {time:"6–9 AM", subject:"TPDE", task:"TPDE U3 Full Problems"},
    {time:"9:30–11:30 AM", subject:"DEM", task:"DEM U3 Sequential Circuits"},
    {time:"11:30–12:30 PM", subject:"GYM", task:"Gym"},
    {time:"1–3 PM", subject:"EDA", task:"EDA U3 DC Drives"},
    {time:"3:30–5 PM", subject:"KDM", task:"KDM U4 Balancing & Vibrations"},
    {time:"5:30–7 PM", subject:"MT", task:"MT U4 Welding"},
    {time:"7:30–9 PM", subject:"DEM", task:"DEM Practice"}
  ]},
  // Day 5
  {day:"Oct 5", tasks:[
    {time:"6–9 AM", subject:"TPDE", task:"TPDE U4 Applications"},
    {time:"9:30–11:30 AM", subject:"DEM", task:"DEM U4 Counters"},
    {time:"11:30–12:30 PM", subject:"GYM", task:"Gym"},
    {time:"1–3 PM", subject:"EDA", task:"EDA U4 Induction Drives"},
    {time:"3:30–5 PM", subject:"KDM", task:"KDM U5 Mechanisms"},
    {time:"5:30–7 PM", subject:"MT", task:"MT U5 Surface Treatment"},
    {time:"7:30–9 PM", subject:"TPDE", task:"TPDE Practice"}
  ]},
  // Day 6
  {day:"Oct 6", tasks:[
    {time:"CLG 9–5 PM", subject:"DEM", task:"Practical Exams"},
    {time:"5:30–7 PM", subject:"TPDE", task:"TPDE Revision"},
    {time:"7:30–9 PM", subject:"MT", task:"MT Revision"}
  ]},
  // Day 7
  {day:"Oct 7", tasks:[
    {time:"CLG 9–5 PM", subject:"DEM", task:"Practical Exams"},
    {time:"5:30–7 PM", subject:"TPDE", task:"TPDE Revision"},
    {time:"7:30–9 PM", subject:"MT", task:"MT Revision"}
  ]},
  // Day 8
  {day:"Oct 8", tasks:[
    {time:"CLG 9–5 PM", subject:"DEM", task:"Practical Exams"},
    {time:"5:30–7 PM", subject:"TPDE", task:"TPDE Revision"},
    {time:"7:30–9 PM", subject:"MT", task:"MT Revision"}
  ]},
  // Day 9
  {day:"Oct 9", tasks:[
    {time:"6–9 AM", subject:"TPDE", task:"Final Practice"},
    {time:"9:30–11:30 AM", subject:"DEM", task:"Final Practice"},
    {time:"11:30–12:30 PM", subject:"GYM", task:"Gym"},
    {time:"1–3 PM", subject:"EDA", task:"Final Revision"},
    {time:"3:30–5 PM", subject:"KDM", task:"Final Revision"},
    {time:"5:30–7 PM", subject:"MT", task:"Final Revision"},
    {time:"7:30–9 PM", subject:"TPDE", task:"Flashcards + Quick Recap"}
  ]}
];

const colors = {
  TPDE: "TPDE",
  DEM: "DEM",
  EDA: "EDA",
  KDM: "KDM",
  MT: "MT",
  UHV: "UHV",
  GYM: "GYM"
};

let tasksState = JSON.parse(localStorage.getItem("tasksState")) || {};

function saveTasks() { localStorage.setItem("tasksState", JSON.stringify(tasksState)); }

function toggleTask(dayIndex, taskIndex) {
  tasksState[dayIndex] = tasksState[dayIndex] || {};
  tasksState[dayIndex][taskIndex] = !tasksState[dayIndex][taskIndex];
  saveTasks();
  updateDashboard();
}

function createDayCard(dayObj, dayIndex) {
  const card = document.createElement("div");
  card.className = "day-card";

  const h2 = document.createElement("h2");
  h2.textContent = dayObj.day;
  let open = true;
  h2.onclick = () => { open = !open; tasksDiv.style.display = open?"block":"none"; };
  card.appendChild(h2);

  const tasksDiv = document.createElement("div");
  tasksDiv.className = "tasks";

  dayObj.tasks.forEach((task, tIdx) => {
    const taskDiv = document.createElement("div");
    taskDiv.className = `task ${colors[task.subject]}`;
    if(tasksState[dayIndex]?.[tIdx]) taskDiv.classList.add("completed");

    const span = document.createElement("span");
    span.textContent = `${task.time}: ${task.task}`;
    taskDiv.appendChild(span);

    const btn = document.createElement("button");
    btn.textContent = "Done";
    btn.onclick = () => toggleTask(dayIndex, tIdx);
    taskDiv.appendChild(btn);

    tasksDiv.appendChild(taskDiv);
  });

  card.appendChild(tasksDiv);

  const progressBar = document.createElement("div");
  progressBar.className = "progress-bar";
  const progress = document.createElement("div");
  progress.className = "progress";
  progressBar.appendChild(progress);
  card.appendChild(progressBar);

  return card;
}

function updateDashboard() {
  const container = document.getElementById("daysContainer");
  container.innerHTML = "";
  let completedTasks = 0;
  let totalTasks = 0;

  schedule.forEach((day, dIdx) => {
    const card = createDayCard(day,dIdx);
    container.appendChild(card);
    day.tasks.forEach((t, tIdx) => {
      totalTasks++;
      if(tasksState[dIdx]?.[tIdx]) completedTasks++;
    });
    const percent = Math.round((Object.values(tasksState[dIdx]||{}).filter(Boolean).length/day.tasks.length)*100 || 0);
    card.querySelector(".progress").style.width = percent+"%";
  });

  const cumulativePercent = Math.round((completedTasks/totalTasks)*100);
  document.getElementById("cumulativeProgress").style.width = cumulativePercent+"%";
}

function updateCountdown() {
  const now = new Date();
  const exam = new Date("2025-10-10T09:00:00");
  let diff = exam - now;
  if(diff<0) diff=0;
  const days = Math.floor(diff/(1000*60*60*24));
  const hours = Math.floor((diff/(1000*60*60))%24);
  const minutes = Math.floor((diff/(1000*60))%60);
  const seconds = Math.floor((diff/1000)%60);
  document.getElementById("countdown").textContent = `Exam in ${days}
